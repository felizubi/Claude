<?php

/**
 * The SWP_Pro_Analytics_Page class will control the entire layout and build of
 * the analytics page in the admin area. It will generate charts, lists, and
 * practical guides to help the user get the absolute most out of the plugin as
 * possible.
 *
 * @since 4.2.0 | 22 AUG 2020 | Created
 *
 */
class SWP_Pro_Analytics_Page {


	/**
	 * The $tabs property will contain a key => value index of each tab of content
	 * that we plan on using on the analytics page. The key will allow us to link
	 * the item in the menu to the container for the content. The name will
	 * appear visually to the user.
	 *
	 * @var array
	 *
	 */
	private $tabs = array(
		'trends' => 'Sitewide Trends',
	 	'posts' => 'Posts Analysis'
	);


	/**
	 * The $html property will contain a string of html as it is generated by the
	 * various class methods. At the end, we'll be able to simply return or echo
	 * this property to display our page.
	 *
	 * @var string
	 *
	 */
	private $html = '';


	/**
	 * The constrcutor will fire everything up by simply adding our
	 * generate_admin_page() to the admin_menu() hook.
	 *
	 * @since  4.2.0 | 22 AUG 2020 | Created
	 * @param  void
	 * @return void
	 *
	 */
	public function __construct() {
		add_action( 'admin_menu', array( $this, 'generate_admin_page') );
	}


	/**
	 * The generate_admin_page() will make use of the add_submenu_page() function
	 * to add this underneath of the main Social Warfare settings in the admin
	 * sidebar menu. It will also register our render_html() to run in order to
	 * render out the actual html of the page. We'll also register in some CSS
	 * styles for this page.
	 *
	 * @since  4.2.0 | 22 AUG 2020 | Created
	 * @see    add_submenu_page()
	 *         https://developer.wordpress.org/reference/functions/add_submenu_page/
	 * @param  void
	 * @return void
	 *
	 */
	public function generate_admin_page() {

		// Declare the menu link
		$swp_analytics_menu = add_submenu_page(
			'social-warfare',
			'Social Analytics by Social Warfare',
			'Social Analytics',
			'manage_options',
			'social-warfare-analytics',
			array( $this, 'render_html'),
			5
		);

		// Queue up our method for registering CSS stylesheets.
		add_action( 'admin_print_styles-' . $swp_analytics_menu, array( $this, 'enqueue_assets' ) );
	}


	/**
	* Enqueue the Settings Page CSS & Javascript
	*
	* @since  4.2.0 | 22 AUG 2020 | Created
	* @param  void
	* @return void
	*
	*/
	public function enqueue_assets() {

		// The .min.css or .css suffix.
		$suffix     = SWP_Script::get_suffix();

		// Enqueue the admin-options-page.css file so we can just reuse that file.
		wp_enqueue_style(
			'swp_admin_options_css',
			SWP_PLUGIN_URL . "/assets/css/admin-options-page{$suffix}.css",
			array(),
			SWP_VERSION
		);

		wp_enqueue_script( 'jquery' );
		wp_enqueue_script( 'jquery-effects-core' );
		wp_enqueue_script( 'jquery-ui-core' );
		wp_enqueue_script( 'jquery-ui-widget' );
		wp_enqueue_script( 'jquery-ui-position' );
		wp_enqueue_media();
		wp_enqueue_script(
			'swp_admin_options_js',
			SWP_PLUGIN_URL . "/assets/js/admin-options-page{$suffix}.js",
			array( 'jquery', 'social_warfare_script' ),
			SWP_VERSION
		);
	}


	/**
	 * The render_html() method will generate and echo out all of the html that
	 * will appear on this page.
	 *
	 * @since  4.2.0 | 22 AUG 2020 | Created
	 * @param  void
	 * @return void
	 *
	 */
	public function render_html() {

		// Create the wrapper for the entire page
		$this->html .= '<div class="sw-admin-wrapper">';

		// Create the header menu.
		$this->html .= $this->generate_header_menu();

		/**
		 * A standalone method exists that is responsible for generating the
		 * content for each of our page tabs. This will loop through our tabs
		 * and call those methods dynamically. This will, in turn add the content
		 * for each tab to our $html class property.
		 *
		 */
		foreach( $this->tabs as $key => $name ) {
			$this->html .= '<div id="swp_'.$key.'" class="sw-admin-tab sw-grid sw-col-940">';
			$this->html .= call_user_func_array( array( $this, 'generate_' . $key . '_tab' ), array() );
			$this->html .= '</div>';
		}

		// Close the wrapper for the entire page.
		$this->html .= '</div>';

		// Echo the fully rendered html to the page.
		echo $this->html;
	}


	/**
	 * The private generate_header_menu() method will generate all of the html
	 * for our header menu. It will loop through the $tabs property and create a
	 * menu item for each tab that is on the page.
	 *
	 * @since  4.2.0 | 26 AUG 2020 | Created
	 * @param  void
	 * @return string The rendered html for this section.
	 *
	 */
	private function generate_header_menu() {

		// Create the wrapper and logo for the menu.
		$html = '<div class="sw-header-wrapper"><div class="sw-grid sw-col-940 sw-top-menu"><div class="sw-grid sw-col-700"><img class="sw-header-logo-pro" src="/wp-content/plugins/social-warfare/assets/images/admin-options-page/social-warfare-pro-light.png"><ul class="sw-header-menu">';

		// Loop through the $tabs property and create menu links.
		$i = 0;
		foreach( $this->tabs as $key => $name ) {
			$html .= '<li class="'.($i++ === 0 ? 'sw-active-tab' : '' ).'"><a class="sw-tab-selector" href="#" data-link="swp_'.$key.'"><span>'.$name.'</span></a></li>';
		}

		// Close the wrapper for the menu.
		$html .= '</ul></div><div class="sw-grid sw-col-220 sw-fit"></div><div class="sw-clearfix"></div></div></div>';

		// Return the string of html to the caller.
		return $html;
	}


	/**
	 * The generate_trends_tab() will compile the html for the trends tab. This
	 * will contain the total shares boxes, and a bunch of charts showcasing
	 * and highlighting the sitewide trends.
	 *
	 * @since  4.2.0 | 31 AUG 2020 | Created
	 * @param  void
	 * @return string The generated string of html.
	 *
	 */
	private function generate_trends_tab() {
		$html = '';

		// Generate the sitewide shares boxes.
		$html .= $this->generate_total_shares_boxes();

		// Generate the "Total Sitewide Shares" line chart.
		$chart = new SWP_Pro_Analytics_Chart();
		$html .= $chart->set_classes('sw-col-460')
					   ->render_html();

		// Generate the "Daily Sitewide Shares" bar chart.
		$chart = new SWP_Pro_Analytics_Chart();
		$html .= $chart->set_classes('sw-col-460 sw-fit')
					   ->set_interval('daily')
					   ->set_range(7)
					   ->render_html();

		$html .= '<div class="sw-clearfix"></div>';

		// Generate the "Total Sitewide Network Shares" line chart.
		$chart = new SWP_Pro_Analytics_Chart();
		$html .= $chart->set_classes('sw-col-460')
					   ->set_scope('all')
					   ->render_html();

		// Generate the "Daily Sitewide Network Shares" chart.
		$chart = new SWP_Pro_Analytics_Chart();
		$html .= $chart->set_classes('sw-col-460 sw-fit')
					   ->set_scope('all')
					   ->set_interval('daily')
					   ->set_range(7)
					   ->render_html();

		$html .= '<div class="sw-clearfix"></div>';
		return $html;
	}


	/**
	 * The generate_posts_tab() will render the html for the "Posts Analysis"
	 * tab. This will display share and share optimization information about the
	 * website's posts.
	 *
	 * @since  4.2.0 | 31 AUG 2020 | Created
	 * @param  void
	 * @return string The string of html.
	 *
	 */
	private function generate_posts_tab() {

		SWP_Pro_Social_Optimizer::update_empty_scores();

		$html = '';
		$html .= $this->generate_optimization_distribution();
		$html .= $this->generate_most_shared_posts();
		$html .= $this->generate_priority_posts();
		return $html;
	}


	/**
	 * The generate_optimization_distribution() method will display a full-width
	 * chart that showcases how many posts fall into each optimization category.
	 * The chart uses flex:x; to distribute the width of each section into a
	 * chart like distribution such that if 50% of the posts are in the green
	 * category, then it will take up 50% of the width of the container.
	 *
	 * @since  4.2.0 | 31 AUG 2020 | Created
	 * @param  void
	 * @return string The string of rendered html.
	 *
	 */
	private function generate_optimization_distribution() {

		/**
		 * The $colors array will contain 3 indices corresponding to the 3 colors
		 * used to display grades on our system. As we loop through the posts,
		 * whichever grade the post falls into will iterate the value in that
		 * indice up one level. We will then know how many posts are in each
		 * color grade category.
		 *
		 * @var array
		 *
		 */
		$colors = array(
			'green' => 0,
			'amber' => 0,
			'red'   => 0,
		);

		// The arguments used to fetch posts from the WP_Query() class.
		$args = array(
			'post_type' => 'post',
			'nopaging'  => true    // Fetch ALL posts.
		);

		// Fetch the posts from the WP_Query class.
		$WP_Query = new WP_Query( $args );

		// Check to ensure that we have some matching posts.
		if( $WP_Query->have_posts() ) {

			// Loop through the posts and iterate up the color category counter.
			while( $WP_Query->have_posts() ) {
				$WP_Query->the_post();
				$score = get_post_meta( get_the_ID(), '_swp_optimization_score', true );
				$color = SWP_Pro_Social_Optimizer::get_color( $score );
				$colors[$color]++;
			}
		}

		// The heading tag and the opening flex wrapper container.
		$html = '<h2>Optimized Posts Distribution</h2><div class="optimization_distribution swp-flex-row">';

		// Loop through each of the three colors and add a section for it.
		foreach( $colors as $key => $value ) {

			// Skip this color if it has zero posts in it.
			if( $value === 0 ) {
				continue;
			}

			// Create the flex item for this color category with the count inside.
			$html .= '<div class="swp-flex-item '.$key.'" style="flex:'.$value.';">'.number_format( $value ).'</div>';
		}

		// Close up the flex wrapper.
		$html .= '</div>';

		// Return the generated html.
		return $html;
	}


	/**
	 * The generate_most_shared_posts() method will generate the html for the
	 * table that displays the most shared posts on the site.
	 *
	 * @since  4.2.0 | 01 SEP 2020 | Created
	 * @param  void
	 * @return string The string of rendered html.
	 *
	 */
	private function generate_most_shared_posts() {
		$html = '';

		// Open the html wrapper, add a heading and description.
		$html .= '<div class="sw-grid sw-col-460"><h2>Most Shared Posts</h2><p>The following posts have been shared more than any others on your site. How can you learn from these posts and repeat this success with other posts?';

		// Query the posts to find the ones we want to display.
		$args = array(
			'post_type'      => 'post',
			'orderby'        => 'meta_value_num',
			'meta_key'       => '_total_shares',
			'order'          => 'DESC',
			'posts_per_page' => 10
		);

		// Pass our query args into WP_Query and get our posts.
		$WP_Query = new WP_Query( $args );

		// Pass the WP_Query object into our method for generating the table.
		$html .= $this->generate_posts_table( $WP_Query );

		// Close up the html wrapper for this section.
		$html .= '</div>';

		// Return the rendered html.
		return $html;
	}


	/**
	 * The generate_priority_posts() method will create the html for the table
	 * of posts that are sorted by optimization priority. These are the posts
	 * with the most shares and the least amount of social optimization.
	 *
	 * @since  4.2.0 | 01 SEP 2020 | Created
	 * @param  void
	 * @return string The string of html for this section
	 *
	 */
	private function generate_priority_posts() {
		$html = '';

		// Open the html wrapper, add a heading and description.
		$html .= '<div class="sw-grid sw-col-460 sw-fit"><h2>Highest Priority Posts to Optimize</h2><p>The following posts have the most shares and are the least socially optimized. That makes them the highest priority for improvement and optimization.';

		// The args for the WP_Query
		$args = array(
			'post_type'      => 'post',
			'orderby'        => 'meta_value_num',
			'meta_key'       => '_swp_optimization_potential',
			'order'          => 'DESC',
			'posts_per_page' => 10
		);

		// Fetch the posts from WP_Query class.
		$WP_Query = new WP_Query( $args );

		// Build the table using the WP_Query object that we created.
		$html .= $this->generate_posts_table( $WP_Query );

		// Close up the html wrapper for this section.
		$html .= '</div>';

		// Return the rendered HTML.
		return $html;
	}


	/**
	 * The generate_posts_table() method will take an instantiated WP_Query
	 * object and return the html for a table displaying those posts.
	 *
	 * @since  4.2.0 | 01 SEP 2020 | Created
	 * @param  object $WP_Query An instantiated WP_Query object.
	 * @return string The string of html for the posts table.
	 *
	 */
	private function generate_posts_table( $WP_Query ) {
		$html = '';

		// Check if the query returned any results.
		if( $WP_Query->have_posts() ) {

			// Open up the table and fill in the header section.
			$html .= '<table>';
			$html .= '<tr><th>Post Title</th><th class="social_shares">Social Shares</th><th class="swp_optimization_score">Optimization Score</th></tr>';

			// Loop through and make an entry row for each post in the loop.
			while( $WP_Query->have_posts() ) {
				$WP_Query->the_post();
				$post_id = get_the_ID();

				// Fetch the data that we'll be displaying alongside the post title
				$total_shares = SWP_Utility::kilomega( get_post_meta( $post_id, '_total_shares', true ) );

				// Get the post score and its corresponding color code.
				$score      = SWP_Pro_Social_Optimizer::fetch_score( $post_id );
				$color_code = SWP_Pro_Social_Optimizer::get_color( $score );

				// Put together the table row for this post.
				$html .= '<tr>';
				$html .= '<td><a href="'.get_edit_post_link( $post_id ).'">' . get_the_title() . '</a></td>';
				$html .= '<td class="social_shares">' . $total_shares . '</td>';
				$html .= '<td class="swp_optimization_score"><div class="swp_score ' . $color_code . '">' . $score . '</div></td>';
				$html .= '</tr>';
			}

			// Close up the table container.
			$html .= '</table>';

		// This is what we'll display if no posts were returned from the query.
		} else {
			$html .= 'Sorry';
		}

		// Always reset the postdata after running a custom query.
		wp_reset_postdata();

		// Return the rendered html to the caller.
		return $html;
	}

	private function generate_total_shares_boxes() {
		global $wpdb, $swp_social_networks;
		$html = '';

		$query = "SELECT * FROM {$wpdb->prefix}swp_analytics WHERE post_id = 0 ORDER BY date DESC LIMIT 1";
		$results = $wpdb->get_row( $query, OBJECT );

		if( empty( $results ) ) {
			return;
		}

		$html .= '<div class="swp-flex-row">';
		foreach( $results as $key => $value ) {
			if( in_array( $key, array('id','date','post_id') ) ) {
				continue;
			}

			if( 'total_shares' !== $key && false === $swp_social_networks[$key]->is_active() ) {
				continue;
			}

			if( 'total_shares' === $key ) {
				$title = 'Total Shares';
			} else {
				$title = $swp_social_networks[$key]->name;
			}

			$html .= '<div class="swp-total-share swp-flex-item '.$key.'"><i class="icon '.$key.'"></i><div class="title">'.$title.'</div><div class="value">'.number_format( $value ).'</div></div>';

		}
		$html .= '</div>';
		return $html;
	}

}
